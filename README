-- Diaspora* user directory ----------------

This is an attempt to build a decentralised directory of diaspora* users.
As this problem has a lot in common with the problem of having a
decentralized PGP public key directory, which is already solved by the
SKS key server, it looks like a good idea to take the sks key server and
transform it into a diaspora user directory server.

This is to become a first proof of concept.

These are the python scripts:
   * partners.py: manages the synchronisation partners list
   * test.py: Will create a database entry for testing and run some
              checks.
   * sduds.py: This is the main program. It waits for other servers to
               connect. If you pass it a host and a port, however, it
               will connect to another server and synchronise with it,
               using the SKS reconciliation algorithm.

They make use of the following modules:
   * trieserver.py: Used to start the trieserver executable.
   * entries.py: database access functionality

Executables:
   * ./trieserver: This is the interface between the synchronisation
                   algorithm of the SKS key server and python. The
                   python scripts make use of this executable, but
                   you never need to execute it manually.

-- Requirements for Ubuntu -----------

aptitude install ocaml
aptitude install libdb4.7-dev
aptitude install python-paramiko

Go to https://github.com/jcarbaugh/python-webfinger and install it.

-- Building --------------------------

cp Makefile.local.unused Makefile.local
make dep
make all

(tested with Ubuntu 10.04 - Lucid Lynx)

This will result in the 'trieserver' executable to be created.

-- Trying it out -----------------

Make two copies, compile each.

For one copy, do:

$ ./partners.py -a -c test localhost 20002
 ... type password ...
	(Adds a client that can authenticate to the server
         with username 'test' and specified password.
         localhost:20002 is the address to fetch database
         entries from.)
$ ./test.py
	(Will create a database entry for an example user.)
$ ./sduds.py

For the other copy, do:

$ ./partners.py -a -s localhost 20000 20001 test
	(Adds a server to which this copy may connect. You
	 need to supply the password you typed above. The
	 database entries are available on localhost:20001,
	 whereas the synchronisation server itself is on
	 localhost:20000)
$ ./sduds.py localhost 20000 20002
	(Connects to localhost:20000, which is the other
	 copy, and synchronised with it. The own database
	 entries are exposed on port 20002, as we told
	 the first copy above with the partners.py command)

Now, you can see log messages that tell you that a database
entry was transmitted. You can test whether it worked properly
by for example opening the entries.sqlite files of both copies
with the firefox extension "SQLite Manager".
